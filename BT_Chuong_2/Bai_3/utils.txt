Đề: đọc file chứa a n, k dòng, xuất kết quả tính ký hiệu jacobi vào file khác
------ PHÂN TÍCH -----------

- Jacobi: Cho n=p1^k...pn^k và (a,n)=1
jacobi(a,n)=(a,p1)^k1.(a,p2)^k2...(a,pn)^kn
Với (a,pi)^ki là ký hiệu legendre

-> hàm phân tích thừa số nguyên tố , và cần sử dụng hệ số mũ của đôi một phần tử
- VD: 20 = 2x2x5
- 20/2 = 10
- 10/2 = 5
- 5/2
- VD: 15 = 3x5
- 

- mã giả phân tích thừa số nguyên tố
func thuasonguyento(n):
    arrray_tsnt = []
        for i from 2 to n:
            if(n%i==0):
                arrray_tsnt.append(i)
            n = int(n/i)
    return arrray_tsnt



        
-> Hàm tìm ước chung lớn nhất
- UCLN(a,b), là số nguyên dương lớn nhất là ước của a,b
- Những trò trước chơi gcd rồi giờ chơi cách khác
- Nhận thấy: (a,b)[a,b] = ab
- ta có thể tìm [a,b] rồi tính (a,b)
- nhận thấy khi a = b = 0 thì gãy nênh thôi quay về oclid

- mã giả tìm gcd ab
func gcd(a,b):
    int lcm_ab = lcm(a,b)
    int mul_ab = abs(a,b) 
    int gcd = mul_ab/lcm_ab
    return gcd

- VD: (10,4)
- 10 = 2*4+2  a = 4 = b , b = a%b
- 4  = 2*2+0
--> 2
- temp = b
- b = a%b
- a = temp 
- 


-> hàm tìm BCNN(a,b)
- BCNN(a,b) = [a,b], LCM, lowest common multiple
- [a,b] là số nguyên dương nhỏ nhất chia hếch cho a và b
- Nhận thấy max(a,b)<=lcm(a,b)<=ab
- cho i chạy trong khoảng max(a,b) đếnh ab
- nếu i chia hếch a và b lần đầu tiên thì i chính là lcm - lowest common multiple

- mã giả hàm tìm lcm ab
func lcm(a,b):
    int max_ab = max(a,b)
    int mul_ab=ab
    int lcm =0
        for i from max_ab to mul_ab do
            if(i%a==0 and i%b==0)
                lcm = i
                break
    return lcm
    

-> hàm max(a,b) tìm 2 số lớn nhất giữa 2 số a,b 
- mã giả tìm max 2 số a b
func max(a,b):
    return a>b?a:b


-> hàm tính legendre

- Legendre: cho p nguyên tố lẻ, a nguyên không chia hết cho p
legendre(a,p)= 1 if a là thặng dư bình phương mod p
legendre(a,p)= -1 if not

-> hàm kt số nguyên tố
- Số nguyên tố là số tự nhiên lớn hơn 1 và không thể hình thành từ 2 số tự nhiên nhỏ hơn nhân nhau
-  
- func is_primes(n):
    if(n<=1)
        return -1
    else
        for i from 2 to n 
            if(n%i==0)
                return false
        return true
        



-> hàm tìm thặng dư bình phương mod p
- Số nguyên a gọi là thặng dư bình phương mod n khi và chỉ khi (a,n) =1, n nguyên dương
và phương trình đồng dư x^2 = a mod(n) có nghiệm
- Nếu p nguyên tố lẻ thì tập {1,2,..,p-1} có (p-1)/2 phần tử là thặng dư bình phương mod p
- VD: tìm các phần tử thặng dư bình phương mod 11
- Có: 10/2=5 phần tử là td^2 mod 11
- Xét tập {1,2,3,...,10}
- 1^2 = 1(mod 11)
- 2^2 = 4 mod 11
- 3^2 = 9 mod 11
- 4^2 = 5 mod 11
- 5^2 = 3 mod 11
-> vậy tập các phần tử td^2 mod 11 là {1,4,9,5,3}

- Mã giả thặng dư bình phương
func thang_du_binh_phuong(p):
    if(p<=0)
        return -1
    else
        if(p%2!=0):
            array_origin=[]
            arr_contain_surplus =[]
            result=[]
            count_tdpb = (p-1)/2
            count_temp=0
                for i from 0 to p-1:
                    array_origin.append(i)  // array mother prepare to compare
                for i from 0 to p-1:
                    arr_contain_surplus.append(i^2%p) // array contain x^2 mod p 
                for i from 0 to len_arr_origin
                    for j from 1 to len_arr_tdpb
                        if(arr_contain_surplus[j]==array_origin[i])
                            result.append(array_origin[i])
                            count_temp++
                    if(count_temp==count_tdpb)  // giam chi phi
                        break
            return result
        else:
            return -1 

    
                            
Mã giả legendre
func legendre(a,p):
    if(a%p==0):
        return 0
    else if(!is_primes(p)):
        return 0
    else if (p%2==0):
        return 0
    else:
        array_tdpb = thang_du_binh_phuong(p)
        len_array_tdpb = array_tdpb.len()
            for i from 0 to len_arr_tdpb:
                if(a==array_tdpb[i])
                    return 1
        return -1

            


    
                






- Mã giả jacobi:


- func jacobi_handle(a,n)
if gcd(a,n)!=1
    return 0
elif (n<=2):
    return 0
elif (n%2==0):
    return 0
else
    array_primes_factor = primes_factor(n) 
    calculate_legendre = []
    jacobi_result = 0
        for i from 0 to array_primes_factor.length():
            calculate_legendre.append()




